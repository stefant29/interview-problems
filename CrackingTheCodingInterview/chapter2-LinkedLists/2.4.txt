import java.util.*;

public class Ex2_4 {
	static class Node<T> {
		T data;
		Node<T> next;
		
		/* constructors */
		public Node() {
			this.data = null;
			this.next = null;
		}
		public Node(T data) {
			this.data = data;
			this.next = null;
		}
		public Node(T data, Node<T> next) {
			this.data = data;
			this.next = next;
		}
		
		/*
		 * Create a node with a given data and add it to the end of the current list
		 * or add a given Node to the end of the list
		 */
		public void appendToTail(T data, Node<T> next) {
			Node<T> head = this;

			/* if data of the head of the list is null, set the data */
			if (this.data == null) {
				/* set this.data to the given data*/
				if (data != null)
					this.data = data;
				/* or to the data of the next Node given */
				else if (next != null)
					this.data = next.data;
				return;
			}

			/* iterate through the list to the end */
			while (head.next != null) { head = head.next; }

			/* create a new node with the given data and insert it */
			if (data != null)
				head.next = new Node<T>(data);
			/* or link the given node at the end */
			else
				head.next = next;
		}

		/* add to the end of the current list an element with given data */
		public void appendToTail(T data) { appendToTail(data, null); }

		/* add to the end of the current list a given node */
		public void appendToTail(Node<T> next) { appendToTail(null, next); }
		
		public String toString() {
			return data.toString();
		}
		
		/* print the given list */
		public void print(String s, Node<T> head) {
			if (head == null)
				return;
			System.out.print(s + "  [");
			while (head.next != null) {
				System.out.print(head.data + ",  ");
				head = head.next;
			}
			System.out.println(head.data + "]");
		}
		
		public Node<T> partition(Node<T> head, Node<T> crtNode) {
			if (head == null || crtNode == null)
				return null;
			
			/* use two queues to store elements smaller and bigger than crtNode */
			Queue<T> left = new LinkedList<T>();
			Queue<T> right = new LinkedList<T>();
			int ref = (int)crtNode.data;
			/* fill in the queues with data from nodes given by head list */
			while (head != null) { 
				if ((int)head.data < ref)
					left.add(head.data);
				else if ((int)head.data > ref)
					right.add(head.data);
				head = head.next;
			}

			/* create a new list and concatenate "left" list with "crtNode" with "right" list */
			Node<T> newHead = null;
			/* start with the left list */
			if (!left.isEmpty())
				newHead = new Node<T>(left.poll());
			while (!left.isEmpty())
				newHead.appendToTail(new Node<T>(left.poll()));

			/* add crtNode */
			newHead.appendToTail(crtNode.data);

			/* continue with right list */
			while (!right.isEmpty())
				newHead.appendToTail(new Node<T>(right.poll()));
		
			return newHead;
		}
	}
	
	public static void main(String[] args) {
		/* create a list for testing */
		Node<Integer> list = new Node<Integer>();
		Node<Integer> n1 = new Node<Integer>(1);
		Node<Integer> n2 = new Node<Integer>(2);
		list.appendToTail(3);
		list.appendToTail(6);
		list.appendToTail(4);
		list.appendToTail(n2);
		list.appendToTail(5);
		list.appendToTail(n1);

		list.print("Before: ", list);
		
		// ex2.4 Partition a linked list: all elements smaller than the given node
		//   should be to its left and all elements bigger should be to its right
		list = list.partition(list, list.next.next);
		list.print("After:  ", list);
	}
}
